service: ${self:custom.serviceName}

plugins:
  - serverless-scriptable-plugin

custom:
  accountId: ${ssm:/accountId}
  outputSnsTopicName: ${self:provider.stage}-stuck-in-traffic-topic
  serviceName: ${self:provider.stage}-stuck-in-traffic
  bucketName: ${self:provider.stage}-stuck-in-traffic-bucket
  stage: int
  deploymentBucket: ${self:custom.stage}-interactive-tv-data-deployment-bucket
  scriptHooks:
    after:deploy:compileEvents: serverless-add-event-triggers.js

resources:
  Resources:
    OutputTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.outputSnsTopicName}
    StuckInTrafficBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: BroxyBucketPolicy
        Statement:
          # Allow any resource in the VPC
          - Action:
              - s3:GetObject
            Sid: AllowAccessFromSpecificVPC
            Resource:
              - Fn::GetAtt: [StuckInTrafficBucket, Arn]
              - Fn::Sub:
                  - ${bucketArn}/*
                  - bucketArn:
                      Fn::GetAtt: [StuckInTrafficBucket, Arn]
            Condition:
              Bool:
                aws:SecureTransport: 'true' # Require HTTPS - this is optional but recommended, broxy will only make https requests
              StringEquals:
                aws:sourceVpc:
                  - vpc-04421ab457940648c # = VPC in TVR Tooling Prod a/c used by Live broxy
                  - vpc-0b00dea11644f6120 # = VPC in TVR Tooling Prod a/c used by Dev broxy
            Effect: Allow
            Principal: '*'

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  stage: ${self:custom.stage}
  logRetentionInDays: 30
  deploymentBucket: ${self:custom.deploymentBucket}

  stackTags:
    BBCComponent: ${self:custom.serviceName}
    BBCProject: interactive-tv-data
    BBCEnvironment: ${self:custom.stage}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
      Resource:
        - 'arn:aws:sns:eu-west-1:${self:custom.accountId}:${self:custom.outputSnsTopicName}'
    - Effect: 'Allow'
      Action:
        - 'cloudwatch:PutMetricData'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 'ssm:GetParameter'
      Resource:
        - 'arn:aws:ssm:eu-west-1:${self:custom.accountId}:parameter/credentials/certs/bbc/cert'
        - 'arn:aws:ssm:eu-west-1:${self:custom.accountId}:parameter/credentials/certs/bbc/key'
        - 'arn:aws:ssm:eu-west-1:${self:custom.accountId}:parameter/credentials/certs/bbc/ca'
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
      Resource:
        {
          'Fn::Join':
            ['', ['arn:aws:s3:::', { 'Ref': 'StuckInTrafficBucket' }]],
        }
    - Effect: 'Allow'
      Action:
        - 's3:PutObject'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - 'Ref': 'StuckInTrafficBucket'
            - '/*'

functions:
  aggregate:
    handler: src/handler.handleEvent
    name: ${self:custom.serviceName}
    description: Hits travel API and finds any potentially stale data
    environment:
      OUTPUT_TOPIC_ARN: 'arn:aws:sns:eu-west-1:${self:custom.accountId}:${self:custom.outputSnsTopicName}'
